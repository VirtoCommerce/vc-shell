# v2.2.0
name: Virto-shell CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    # Only on commits with package changes or release commits
    paths:
      - 'framework/**'
      - 'cli/**'
      - 'configs/**'
      - '**/package.json'
      - '**/CHANGELOG.md'
  release:
    types: [published]

jobs:
  CI:
    runs-on: ubuntu-latest
    # Only runs on release commits, releases, or manual dispatch
    if: |
      github.event_name == 'release' || 
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.head_commit.message, 'release:') ||
      contains(github.event.head_commit.message, 'chore: release')
    env:
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      VERSION_SUFFIX: ''
      ARTIFACT_URL: ''
      GITHUB_USER: '${{ github.repository_owner }}'
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NPM_TAG: 'latest'

    steps:
    - uses: actions/checkout@v4
    # Setup .npmrc file to publish to GitHub Packages
    - uses: actions/setup-node@v4
      with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'
          always-auth: true

    - name: Set GITHUB_USER to lowercase
      run: |
        echo "GITHUB_USER=${GITHUB_USER,,}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile
      env:
        YARN_ENABLE_IMMUTABLE_INSTALLS: false

    - name: Get Image Version
      uses: VirtoCommerce/vc-github-actions/get-image-version@master
      id: image
      with:
        projectType: theme

    - name: Set release variables
      if: ${{ github.ref == 'refs/heads/main' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.prefix }}" >> $GITHUB_ENV
    - name: Set release-alpha variables
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.fullVersion }}" >> $GITHUB_ENV
    - name: Set PR variables
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "VERSION_SUFFIX=${{ steps.image.outputs.taggedVersion }}" >> $GITHUB_ENV

    - name: Build virto-shell
      run: |
        yarn build

    - name: Configure npm
      if: success()
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Clean git state
      if: success()
      run: |
        # Reset any changes to yarn.lock that might have occurred during install
        git checkout -- yarn.lock || true
        # Ensure clean working directory for Lerna
        git status --porcelain

    - name: Publish with Lerna
      if: success()
      run: |
        echo "Publishing packages with Lerna..."
        # Lerna automatically:
        # - Detects changed packages from package.json
        # - Sets correct npm tags based on versions
        # - Handles dependencies between packages
        npx lerna publish from-package --yes --no-git-reset
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Verify published packages
      if: success()
      run: |
        echo "Verifying published packages:"
        npx lerna list --json | jq '.[].name' | while read package; do
          echo "Package: $package"
          npm view "$package" version dist-tags 2>/dev/null || echo "Package not found in npm"
        done
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}



  Storybook:
    needs: 'CI'
    uses: VirtoCommerce/vc-shell/.github/workflows/storybook-ci.yml@main
    with:
      event_name: ${{ github.event_name }}
    secrets:
      VCMP_PLATFORM_TOKEN: ${{ secrets.VCMP_PLATFORM_TOKEN }}
