---
description: Rules specific to the VC-Shell framework
globs: 
alwaysApply: true
---

# VC-Shell Framework Specific Rules

## Project Structure

### Core Architecture
- Core functionality in `core/` directory
  - API interactions in `core/api`
  - Global composables in `core/composables`
  - Services in `core/services`
  - Plugins in `core/plugins`
  - Interceptors in `core/interceptors`
  - Directives in `core/directives`
  - Constants in `core/constants`

### Shared Components
- Common components in `shared/` directory
  - Reusable components in `shared/components`
  - Shared composables in `shared/composables`
  - Common modules in `shared/modules`
  - Shared pages in `shared/pages`
  - Utilities in `shared/utilities`

### UI Colors
- Use color pallete [colors.scss](mdc:framework/assets/styles/theme/colors.scss) like tailwind (tw-bg-[var(--primary-500)])

### UI Components
- UI components in `ui/` directory following atomic design
- Follow component architecture rules below

## Component Architecture

### Component Structure
- Use atomic design (atoms, molecules, organisms)
- Place internal components in the `_internal` directory
- Create separate composables in the `composables` directory for complex components

### Naming Conventions
- Use `Vc` prefix for all framework components in `ui/` folder
- Add suffix based on component type (e.g., `VcButton`, `VcContainer`)
- Internal components must have parent component prefix

### Vue Components
- Use `<script lang="ts" setup>`
- Define Props interface using TypeScript
- Use defineSlots for slot typing
- Define Emits using TypeScript interfaces

### Styling
- Use SCSS
- Apply TailwindCSS with `tw-` prefix
- Define CSS variables in `:root`
- Follow BEM methodology for class naming

### Responsiveness
- Use `$isMobile.value` and `$isDesktop.value` for adaptive design
- Create separate mobile versions of components in the `mobile` directory
- Use class modifiers with `--mobile` and `--desktop` suffixes
- Use breakpoints from useBreakpoints composable

### State and Logic
- Move complex logic to composables
- Use injection-keys.ts for dependency injection
- Follow provide/inject pattern for state management
- Use VueUse composables where applicable

### TypeScript
- All components must be typed
- Use interfaces for Props and Emits
- Define slot types using defineSlots
- Utilize Vue's component type helpers

### Performance
- Use computed properties for derived values
- Apply dynamic imports for large components
- Monitor and optimize re-rendering
- Implement proper lazy loading for routes and components

### Security
- Escape URLs in styles using CSS.escape()
- Validate all input data
- Use secure methods for DOM manipulation
- Implement proper CORS and CSP policies

### Documentation
- Create stories for each component
- Document Props, Events, and Slots
- Add usage examples
- Keep CHANGELOG.md up to date

## Framework Features

### Authentication & Authorization
- Use permission system from core

## Global Rules

### Versioning
- Maintain CHANGELOG.md
- Use semantic versioning
- Document breaking changes
- Follow npm publishing guidelines

### Localization
- Use vue-i18n
- Format localization keys as `namespace.key`
- Support multilingual through locales/
- Handle RTL languages properly

### Theming
- Use CSS variables for theming
- Define color schemes in :root
- Follow design system for colors and spacing
- Support light and dark themes

### Error Handling
- Implement global error boundaries
- Use proper error logging
- Handle API errors consistently
- Provide user-friendly error messages

### Build and Development
- Use Vite for development
- Follow TypeScript strict mode
- Maintain proper dependency management
- Use proper environment variables

### Git
- Do not make auto commits
